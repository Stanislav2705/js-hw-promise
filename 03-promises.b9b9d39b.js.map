{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SACrCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAEvCI,GAAW,EAiCf,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MAxCPT,EAAYiB,iBAAiB,UAE7B,SAAkBC,GAGhB,GAFAA,EAAEC,iBAEEb,EACF,OAGF,IAAIc,EAAQC,OAAOlB,EAAWmB,OAC1BC,EAAOF,OAAOjB,EAAUkB,OACxBE,EAASH,OAAOhB,EAAYiB,OAEhChB,GAAW,EAEX,IAAK,IAAImB,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChClB,EAAckB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAE9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBX,EAAA8B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAE9DW,GAASG,EAGXP,YAAW,WACTV,GAAW,IACVc,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Notify } from 'notiflix';\n\nconst formPromise = document.querySelector('.form');\nconst delayField = document.querySelector('[name=\"delay\"]');\nconst stepField = document.querySelector('[name=\"step\"]');\nconst amountField = document.querySelector('[name=\"amount\"]');\n\nlet isActive = false;\n\nformPromise.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  if (isActive) {\n    return;\n  }\n\n  let delay = Number(delayField.value);\n  let step = Number(stepField.value);\n  let amount = Number(amountField.value);\n\n  isActive = true;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n\n  setTimeout(() => {\n    isActive = false;\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formPromise","document","querySelector","$ce04d3a99e08e73b$var$delayField","$ce04d3a99e08e73b$var$stepField","$ce04d3a99e08e73b$var$amountField","$ce04d3a99e08e73b$var$isActive","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b9b9d39b.js.map"}